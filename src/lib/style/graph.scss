@use "variables";
@use "colors";

@mixin selectedGraphElement($color) {
    stroke: $color !important;
    fill: $color;

    filter: drop-shadow(0 0 5px $color);
}

main#graph {
    display: flex;
    flex-direction: row;
    align-items: stretch;

    height: calc(100vh - variables.$header-size);

    section {
        display: flex;
        flex-direction: column;
        align-items: center;
    }
}

#graphDisplay {
    position: relative;
    background-color: black;
    flex-grow: 1;

    border: 2px solid colors.$text-passive;

    border-width: 0 2px;
    // overflow: hidden;

    height: unset;
    width: unset;
    z-index: 0;

    &,
    * {
        transition: fill .1s line, linear, stroke .1s line, linear;
    }

    &.view {

        path {

            &.selected {
                stroke-width: 5;
                stroke-dasharray: 15, 15;
                animation: animStroke 1s linear 0s infinite;
            }
        }
    }

    text {
        fill: white;
        stroke: white !important;
        pointer-events: none;
        background-color: rgba(black, $alpha: 0.4);
        border-radius: 2px;
        filter: brightness(150%) !important;
    }


    circle,
    path {
        cursor: pointer;
        pointer-events: all;
        filter: drop-shadow(0 0 2px);
        transition: none;

        &:hover,
        &.selected {

            &,
            +text {
                @include selectedGraphElement(colors.$border-mid);
            }
        }
    }

    .phantom {
        user-select: none;
        pointer-events: none;
        stroke-width: 2px !important;
    }

    circle {

        &:hover,
        &.selected {

            &,
            +text {
                @include selectedGraphElement(colors.$border-mid);
            }
        }
    }

    &.delete {

        circle,
        path {

            &:hover,
            &.selected {

                &,
                +text {
                    @include selectedGraphElement(colors.$error-fg);
                }
            }
        }
    }

    &.add {
        cursor: crosshair;

        circle,
        path {
            pointer-events: none;
        }
    }

    &.link {

        path {
            pointer-events: none;
        }
    }

    circle {
        fill: colors.$text-passive;
        stroke: none !important;
    }

    path {
        stroke: colors.$graph-link-color !important;
        filter: drop-shadow(0 0 2px colors.$graph-link-color);
        fill: none !important;

        &.partiallySelected {
            stroke: url('#selectGradient') !important;
            z-index: 5;
        }
    }
}

@keyframes animStroke {
    from {
        stroke-dashoffset: 30;
    }

    to {
        stroke-dashoffset: 0;
    }
}

#graphData {
    width: 13em;

}

#graphData,
#graphActions {
    z-index: 5;
    padding: 1em;
    position: relative;
    overflow-y: scroll;

    input,
    select {
        border-radius: 3px;
        border: none;

        width: 3em;

        &[type=text] {
            width: 5em;
        }

        &[type=number] {
            appearance: none;
            -moz-appearance: textfield;
        }

        &[type=checkbox] {
            width: 1em;
        }

        background-color: rgba(colors.$input-bg, $alpha: .5);
    }

    select {
        min-width: unset;
        width: 5em;
    }
}

#graphActions {
    .editButton {
        position: absolute;
        left: 0;
        translate: -110% 0;

        z-index: 5;
    }
}

#graphActions__picker {
    display: flex;
    flex-direction: column;
}


table {
    border-collapse: collapse;

    td,
    th {
        padding: .3em;
        border: 1px solid colors.$text-mid;
    }

    thead th {
        background-color: colors.$header-fg;
    }

    tbody tr {
        &:nth-child(2n) {
            background-color: rgba(colors.$header-bg, $alpha: .5);
        }

        &.selected {
            background-color: colors.$border-mid;
            box-shadow: 0 0 5px colors.$border-mid;
        }
    }
}