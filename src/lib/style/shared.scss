@use "graphPreview";
@use "inputs";
@use "colors";
@use "mixins";
@use "animations";
@use "sass:math";

body,
html {
    background-color: colors.$global-bg;
    margin: 0;
    padding: 0;
}

* {
    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
    color: colors.$text-active;
    transition: all cubic-bezier(0.075, 0.82, 0.165, 1) .4s;
}

main {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    max-width: 100vw;
}


h1 {
    color: white;
    font-size: 5em;
    text-shadow: 0 0 5px aquamarine;

}

h2 {
    font-size: 2em;

    display: flex;
    flex-direction: row;
    align-items: center;

    gap: .35em;
}

h3 {
    color: gainsboro;
    font-size: 2.25em;
    padding: 2em;
}

a {
    text-decoration: none
}

.iconLink {
    @include mixins.simple-button();

    color: inherit;
    text-decoration: none;
    font-size: .75em;

    padding: .4em;

    gap: .7em;

    background-color: colors.$global-bg;

    justify-content: start;

    aspect-ratio: unset;

    border-radius: .75em;

    .graphPreview & {
        background-color: inherit;
    }

    &.alt {
        background-color: colors.$header-bg;
    }

    &.selected {
        background-color: colors.$button-selected;
    }

    &>span {
        font-size: 1.5em;

    }

    &.red {

        &,
        & * {
            color: colors.$error-fg !important;
        }

        &:hover {
            background-color: colors.$error-bg;
        }
    }

    &>img,
    >svg {
        height: 1.8em;
    }
}

.slimButton {
    @include mixins.simple-button();

    background-color: transparent !important;
    text-align: center;

    &:not(.noHover) {
        filter: drop-shadow(0 0 0 white);

        &:hover {
            filter: drop-shadow(0 0 5px white);
        }
    }
}

hr {
    flex-grow: 1;
    margin: auto;

    border: solid 1px gainsboro;
}




svg {
    $size: 2em;

    height: $size;
    width: $size;


    &,
    * {
        stroke: gainsboro !important;

        .red & {
            stroke: colors.$error-fg !important;
        }

        &.starFilled,
        &.starFilled * {
            stroke: colors.$border-mid !important;
            fill: colors.$border-mid;
        }
    }

    h2>& {
        height: 1em;
        width: 1em;
    }
}

.error {
    font-size: 1em;
    color: colors.$error-fg;
    background-color: colors.$error-bg;

    border: solid 2px colors.$error-border;

    border-radius: 1em;
    padding: .4em;
}

.buttonList {
    display: flex;
    flex-direction: column;
    gap: .35em;
}

.backdrop {
    @include mixins.backdrop();

}

.loader {
    $size: 5em;
    position: relative;

    width: $size;
    height: $size;

    transform-origin: center;

    margin: $size;

    >* {
        $animation-time: 2s;
        position: absolute;
        width: 45%;
        height: 45%;
        left: 0;
        top: 0;
        box-sizing: border-box;
        background-color: white;
        border-radius: 20%;
        animation: loading $animation-time cubic-bezier(0.165, 0.84, 0.44, 1) 0s infinite, colorChange calc($animation-time * 0.6) linear 0s infinite;

        &:nth-child(2) {
            animation-delay: calc(-1 * $animation-time / 4), - math.random() * $animation-time;
        }

        &:nth-child(3) {
            animation-delay: calc(-2 * $animation-time / 4), - math.random() * $animation-time;
        }

        &:nth-child(4) {
            animation-delay: calc(-3 * $animation-time / 4), - math.random() * $animation-time;
        }

    }
}