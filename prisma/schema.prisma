// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    ADMIN
}

enum Visibility {
    PUBLIC
    RESTRICTED
    PRIVATE
}

model User {
    id           Int        @id @default(autoincrement())
    bio          String     @default("Hello ! I'm a new user")
    name         String     @unique
    passwordHash String
    email        String     @unique
    joinedAt     DateTime   @default(now())
    visibility   Visibility @default(PUBLIC)

    sessions              Session[]
    graphs                Graph[]      @relation("GraphAuthor")
    favorites             Graph[]      @relation("Favorites")
    ratings               Rating[]     @relation("RatingAuthor")
    collections           Collection[] @relation("CollectionAuthor")
    subscribedCollections Collection[] @relation("CollectionSubscriber")
}

model Graph {
    id          Int      @id @default(autoincrement())
    title       String   @db.VarChar(255)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    description String   @db.LongText
    authorId    Int?
    public      Boolean
    data        Json

    author      User?        @relation("GraphAuthor", references: [id], fields: [authorId], onUpdate: Cascade, onDelete: SetNull)
    favorited   User[]       @relation("Favorites")
    ratings     Rating[]     @relation("GraphRatings")
    collections Collection[] @relation("CollectionGraphs")

    @@fulltext([title])
}

model Rating {
    id          Int      @id @default(autoincrement())
    authorId    Int?
    createdAt   DateTime @default(now())
    postId      Int
    title       String   @db.VarChar(255)
    description String   @db.MediumText
    rating      Int

    graph  Graph @relation("GraphRatings", references: [id], fields: [postId], onDelete: Cascade)
    author User? @relation("RatingAuthor", references: [id], fields: [authorId], onUpdate: Cascade, onDelete: SetNull)
}

model Collection {
    id          Int        @id @default(autoincrement())
    title       String     @db.VarChar(255)
    description String     @db.MediumText
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    authorId    Int?
    visibility  Visibility @default(PUBLIC)

    author      User?   @relation("CollectionAuthor", references: [id], fields: [authorId], onUpdate: Cascade, onDelete: SetNull)
    graphs      Graph[] @relation("CollectionGraphs")
    subscribers User[]  @relation("CollectionSubscriber")

    @@fulltext([title])
}

model Session {
    id        String   @id
    userId    Int
    expiresAt DateTime

    user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}
